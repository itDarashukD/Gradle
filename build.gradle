plugins {
    //that plugin Add Java compilation, testing, and bundling capabilities to a project.
    id 'java'
}

plugins {
    id "com.jfrog.bintray" version "0.4.1"
}

///////////////////////////////////////////////////
//For executeble JAR:
jar {
    manifest {
//        attributes 'Main-Class': 'com.example.main.Application'
        attributes 'Main-Class': 'org.example.Main'
    }
}
/////////////////////////////////////////////////
//plugins


//apply plugin: 'java'
//apply plugin: JavaPlugin


//create and applying new custom plugin , it's include only one task
class GreetingPlugin1 implements Plugin<Project> {
    void apply(Project project) {

        project.task('hello22') {
            doLast {
                println "Hello from the GreetingPlugin"
            }
        }
    }
}

apply plugin: GreetingPlugin1

///////////////////////////////////////////

apply plugin: GreetingPlugin

greeting.message = 'Hi from Gradle'   //create object, set value

class GreetingPlugin implements Plugin<Project> {
    void apply(Project project) {
        // Add the 'greeting' extension object
        project.extensions.create("greeting", GreetingPluginExtension)  //command to create an object

        // Add a task that uses the configuration
        project.task('hello23') {
            doLast {
                println project.greeting.message
            }
        }
    }
}

class GreetingPluginExtension {
    def String message = 'Hello from GreetingPlugin'
}

///////////////////////////////////////
apply plugin: GreetingPlugin4

greetingToSome {
    message = 'Hi'
    greeter = 'Gradle'
}

class GreetingPlugin4 implements Plugin<Project> {
    void apply(Project project) {
        project.extensions.create("greetingToSome", GreetingPluginExtension4)

        project.task('hello4') {
            doLast {
                println "${project.greetingToSome.message} from ${project.greetingToSome.greeter}"
            }
        }
    }
}

class GreetingPluginExtension4 {
    String message
    String greeter
}

//////////////////////////////////////

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}
//to some additional repository
//repositories {
//    maven {
//        url "http://repo.mycompany.com/maven2"
//    }
//}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

test {
    useJUnitPlatform()
}

task hello {
    doLast {
        print 'hello Dzmitry'
    }
}

task upper {
    doLast {
        String expString = 'TUTORIALS point'
        println "Original: " + expString
        println "Upper case: " + expString.toUpperCase()

    }
}

task count {
    doLast {
        4.times {
            print "$it"
        }
    }
}

task groovyJDK {
    doLast {
        String myName = "Marc";
        myName.each() {
            println "${it}"
        };
    }
}

task projectInfo {
    doLast {
        println project.buildDir
        println getProject().getTasks().getByName('projectInfo')
        println getProject().getPath()

    }
}

task differntApproachesToMethodsWritings {
    doLast {
        repositories {
            println "in a closure"
        }
        repositories() {
            println "in a closure"
        }
        repositories({ println "in a closure" })
    }
}

task helloName {
    doLast {
        println hello.name
        println project.hello.name

        println tasks.hello.name
        println tasks['hello'].name
        println tasks.helloName.name

        println tasks.getByPath('hello').path
        println tasks.getByPath(':hello').path
    }
}


// second task Y depends on first X and will developed after first
task taskX {
    doLast {
        println 'taskX'
    }
}
task taskY(dependsOn: 'taskX') {
    doLast {
        println "taskY"
    }
}

// another one possibility
task taskA {
    doLast {
        println 'taskA'
    }
}
task taskB {
    doLast {
        println 'taskB'
    }
}
taskA.dependsOn taskB


// description of task
task copy(type: Copy) {
    description 'Copies the resource directory to the target directory.'
    from 'resources'
    into 'target'
    include('**/*.txt', '**/*.xml', '**/*.properties')
    println("description applied") // <-- this description will displayed
}


//If

task eclipse {
    doLast {
        println 'Hello Eclipse'
    }
}

// #1st approach - closure returning true, if the task should be executed, false if not.
eclipse.onlyIf {
    project.hasProperty('usingEclipse')
}

// #2nd approach - alternatively throw an StopExecutionException() like this
eclipse.doFirst {
    if (!usingEclipse) {
        throw new StopExecutionException()
    }
}


//////////////////////////  test
apply plugin: 'java' // adds 'test' task

test {
    // enable TestNG support (default is JUnit)
    useTestNG()

    // set a system property for the test JVM(s)
    systemProperty 'some.prop', 'value'

    // explicitly include or exclude tests
    include 'org/foo/**'
    exclude 'org/boo/**'

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // set heap size for the test JVM(s)
    minHeapSize = "128m"
    maxHeapSize = "512m"

    // set JVM arguments for the test JVM(s)
    jvmArgs '-XX:MaxPermSize=256m'

    // listen to events in the test execution lifecycle
    beforeTest {
        descriptor -> logger.lifecycle("Running test: " + descriptor)
    }

    // listen to standard out and standard error of the test JVM(s)
    onOutput {
        descriptor, event -> logger.lifecycle
        ("Test: " + descriptor + " produced standard out/err: "
                + event.message )
    }
}